{"version":3,"sources":["redux/constantType.js","components/example/ExampleComponent.js","redux/actions/exampleAction.js","App.js","reportWebVitals.js","redux/reducers/exampleReducer.js","redux/reducers/index.js","redux/actions/example.saga.js","redux/actions/index.js","redux/store.js","index.js"],"names":["GET_USER_REQUESTED","GET_USER_SUCCESS","GET_USER_FAILED","connect","state","ownProps","prop","props","dispatch","useDispatch","useEffect","user","type","payload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","users","loading","error","rootReducer","combineReducers","action","fetchUser","userSaga","getApi","fetch","method","headers","response","json","catch","call","put","message","takeEvery","rootSaga","all","sagaMiddelWear","createSagaMiddelWear","store","compose","applyMiddleware","window","devToolsExtension","createStore","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAaA,G,YAAqB,sBACrBC,EAAmB,mBACnBC,EAAkB,kB,WCe/B,IAMeC,eANS,SAACC,EAAOC,GAC5B,MAAO,CACHC,KAAMF,EAAME,QAILH,EAnBf,SAA0BI,GACtB,IAAMC,EAAWC,cAKjB,OAJAC,qBAAU,WCJP,IAAiBC,EDKjBH,ECJI,CACHI,KAAOZ,EACPa,QAAUF,MDGZ,IAGE,6CEAOG,MAPf,WAEE,OACE,cAAC,EAAD,KCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCLRQ,EAAe,CACjBC,MAAO,GACPC,SAAS,EACTC,MAAQ,MCFL,IAAMC,EAAcC,YAAgB,CACvClB,KDIW,WAAuD,IAA/BP,EAA8B,uDAAtBoB,EAAcM,EAAQ,uCACjE,OAAQA,EAAOlB,MACX,KAAKX,EACD,OAAO,2BAAKG,GAAZ,IAAmBsB,SAAS,EAAOD,MAAOK,EAAOjB,UACrD,KAAKb,EACD,OAAO,2BAAKI,GAAZ,IAAmBsB,SAAS,IAChC,KAAKxB,EACD,OAAO,2BAAKE,GAAZ,IAAmBsB,SAAS,EAAOC,MAAQG,EAAOjB,UACtD,QACI,OAAOT,M,0CEHT2B,G,WAWAC,GArBV,SAASC,IACL,OAAOC,MAHI,2DAGS,CAChBC,OAAS,MACTC,QAAU,CACN,eAAgB,sBAErBlB,MAAK,SAAAmB,GAAQ,OAAIA,EAASC,UAC5BC,OAAM,SAAAZ,GAAU,MAAMA,KAG3B,SAAUI,IAAV,uEAEsB,OAFtB,kBAE4BS,YAAKP,GAFjC,OAGQ,OADMR,EAFd,gBAGcgB,YAAK,CAAC7B,KAAO,mBAAqBa,MAAQA,IAHxD,8BAMQ,OANR,mCAMcgB,YAAK,CAAC7B,KAAO,kBAAoB8B,QAAU,KAAEA,UAN3D,qDAWA,SAAUV,IAAV,iEACI,OADJ,SACUW,YAAU,qBAAqBZ,GADzC,uCAIeC,Q,WC1BUY,GAAV,SAAUA,IAAV,iEACX,OADW,SACLC,YAAI,CACNb,MAFO,uCCEf,IAAMc,EAAiBC,cAEjBC,EAAQC,YACVC,YAAgBJ,GAChBK,OAAOC,mBAAqBD,OAAOC,oBAFzBH,CAGTI,IAHSJ,CAGIrB,GAElBkB,EAAeQ,IAAIV,GAEJI,QCJfO,IAASC,OACP,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,IAAMS,WAAP,UACE,cAAC,EAAD,QAIJC,SAASC,eAAe,SAM1B5C,M","file":"static/js/main.a146c45f.chunk.js","sourcesContent":["export const GET_USER_REQUESTED = \"GET_USER_REQUESTED\";\r\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\r\nexport const GET_USER_FAILED = \"GET_USEFAILEDED\";","import React, { useEffect } from 'react';\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport { getuser } from '../../redux/actions/exampleAction';\r\n\r\nfunction ExampleComponent(props) {\r\n    const dispatch = useDispatch();\r\n    useEffect(()=>{\r\n       dispatch(getuser());\r\n    },[])  \r\n  \r\n    return (\r\n        <div>\r\n            Example\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        prop: state.prop\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ExampleComponent)","import { GET_USER, GET_USER_REQUESTED } from \"../constantType\";\r\n\r\nexport function getuser(user){\r\n    return {\r\n        type : GET_USER_REQUESTED,\r\n        payload : user\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport ExampleComponent from './components/example/ExampleComponent';\n\nfunction App() {\n\n  return (\n    <ExampleComponent/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {  GET_USER_FAILED, GET_USER_REQUESTED, GET_USER_SUCCESS } from \"../constantType\";\r\n\r\nconst initialState = {\r\n    users: [],\r\n    loading: false,\r\n    error : null\r\n}\r\n\r\nexport default function exampleReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_USER_SUCCESS:\r\n            return { ...state, loading: false, users: action.payload };\r\n        case GET_USER_REQUESTED:\r\n            return { ...state, loading: true };\r\n        case GET_USER_FAILED:\r\n            return { ...state, loading: false, error : action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport exampleReducer from \"./exampleReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    user : exampleReducer\r\n})","import {call, put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst apiUrl = 'https://611fe63824d11c001762eb49.mockapi.io/task/gettask';\r\n\r\nfunction getApi(){\r\n    return fetch(apiUrl,{\r\n        method : 'GET',\r\n        headers : {\r\n            'Content-Type' :'application/json',\r\n        },\r\n    }).then(response => response.json())\r\n    .catch(error => {throw error})\r\n}\r\n\r\nfunction* fetchUser(){\r\n    try{\r\n        const users = yield call(getApi);\r\n        yield put ({type : 'GET_USER_SUCCESS' , users : users})\r\n    }\r\n    catch(e){\r\n        yield put ({type : 'GET_USER_FAILED' , message : e.message})\r\n    }\r\n    \r\n}\r\n\r\nfunction* userSaga(){\r\n    yield takeEvery('GET_USER_REQUESTED',fetchUser)\r\n}\r\n\r\nexport default userSaga;","import { all } from 'redux-saga/effects';\r\nimport userSaga from './example.saga';\r\n\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        userSaga(),\r\n    ])\r\n}","import { compose, createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"./reducers\";\r\nimport createSagaMiddelWear  from 'redux-saga';\r\nimport rootSaga from \"./actions\";\r\n\r\nconst sagaMiddelWear = createSagaMiddelWear();\r\n\r\nconst store = compose(\r\n    applyMiddleware(sagaMiddelWear),\r\n    window.devToolsExtension && window.devToolsExtension())\r\n    (createStore)(rootReducer);\r\n\r\nsagaMiddelWear.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store  from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}